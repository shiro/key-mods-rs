name: CI

# https://github.com/messense/rjmespath-py/blob/main/.github/workflows/CI.yml

on:
  push:
    branches:
      - proto/rewrite
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, x86,
        # aarch64, armv7, s390x, ppc64le
        ]
    steps:
      - uses: actions/checkout@v3
      - name: Setup git config
        run: git config --global --add safe.directory '*'
      - name: Git submodule init
        run: git submodule sync --recursive && git submodule update --init --force; ls -la evdev-rs/evdev-sys/libevdev

      # install python & rust
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
          architecture: x64
      - uses: dtolnay/rust-toolchain@nightly

      # run tests
      - name: Setup test dependencies
        run:  ./ci/prepare-ci-test.sh
      - name: Test
        run: source .env/bin/activate && ./test.sh

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          rust-toolchain: nightly
          sccache: 'true'
          manylinux: auto
          before-script-linux: "./ci/prepare-ci-container.sh"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./*.whl
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
          body: "This is my release text"
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing *