use evdev_rs::enums::{EV_SYN, EventCode};
use evdev_rs::TimeVal;

use crate::*;

pub const INPUT_EV_DUMMY_TIME: TimeVal = TimeVal { tv_sec: 0, tv_usec: 0 };

pub static SYN_REPORT: EvdevInputEvent = EvdevInputEvent { event_code: EventCode::EV_SYN(EV_SYN::SYN_REPORT), value: 0, time: INPUT_EV_DUMMY_TIME };

lazy_static! {
pub static ref BTN_LEFT: Key = Key::from_str("BTN_LEFT").unwrap();
pub static ref BTN_MIDDLE: Key = Key::from_str("BTN_MIDDLE").unwrap();
pub static ref BTN_RIGHT: Key = Key::from_str("BTN_RIGHT").unwrap();
pub static ref KEY_6: Key = Key::from_str("KEY_6").unwrap();
pub static ref KEY_A: Key = Key::from_str("KEY_A").unwrap();
pub static ref KEY_B: Key = Key::from_str("KEY_B").unwrap();
pub static ref KEY_BACKSPACE: Key = Key::from_str("KEY_BACKSPACE").unwrap();
pub static ref KEY_C: Key = Key::from_str("KEY_C").unwrap();
pub static ref KEY_CAPSLOCK: Key = Key::from_str("KEY_CAPSLOCK").unwrap();
pub static ref KEY_D: Key = Key::from_str("KEY_D").unwrap();
pub static ref KEY_DOWN: Key = Key::from_str("KEY_DOWN").unwrap();
pub static ref KEY_E: Key = Key::from_str("KEY_E").unwrap();
pub static ref KEY_ENTER: Key = Key::from_str("KEY_ENTER").unwrap();
pub static ref KEY_ESC: Key = Key::from_str("KEY_ESC").unwrap();
pub static ref KEY_F: Key = Key::from_str("KEY_F").unwrap();
pub static ref KEY_G: Key = Key::from_str("KEY_G").unwrap();
pub static ref KEY_GRAVE: Key = Key::from_str("KEY_GRAVE").unwrap();
pub static ref KEY_H: Key = Key::from_str("KEY_H").unwrap();
pub static ref KEY_I: Key = Key::from_str("KEY_I").unwrap();
pub static ref KEY_J: Key = Key::from_str("KEY_J").unwrap();
pub static ref KEY_K: Key = Key::from_str("KEY_K").unwrap();
pub static ref KEY_KPD0: Key = Key::from_str("KEY_KP0").unwrap();
pub static ref KEY_KPD1: Key = Key::from_str("KEY_KP1").unwrap();
pub static ref KEY_KPD2: Key = Key::from_str("KEY_KP2").unwrap();
pub static ref KEY_KPD3: Key = Key::from_str("KEY_KP3").unwrap();
pub static ref KEY_KPD4: Key = Key::from_str("KEY_KP4").unwrap();
pub static ref KEY_KPD5: Key = Key::from_str("KEY_KP5").unwrap();
pub static ref KEY_KPD6: Key = Key::from_str("KEY_KP6").unwrap();
pub static ref KEY_KPD7: Key = Key::from_str("KEY_KP7").unwrap();
pub static ref KEY_KPD8: Key = Key::from_str("KEY_KP8").unwrap();
pub static ref KEY_KPD9: Key = Key::from_str("KEY_KP9").unwrap();
pub static ref KEY_F1: Key = Key::from_str("KEY_F1").unwrap();
pub static ref KEY_F2: Key = Key::from_str("KEY_F2").unwrap();
pub static ref KEY_F3: Key = Key::from_str("KEY_F3").unwrap();
pub static ref KEY_F4: Key = Key::from_str("KEY_F4").unwrap();
pub static ref KEY_F5: Key = Key::from_str("KEY_F5").unwrap();
pub static ref KEY_F6: Key = Key::from_str("KEY_F6").unwrap();
pub static ref KEY_F7: Key = Key::from_str("KEY_F7").unwrap();
pub static ref KEY_F8: Key = Key::from_str("KEY_F8").unwrap();
pub static ref KEY_F9: Key = Key::from_str("KEY_F9").unwrap();
pub static ref KEY_F10: Key = Key::from_str("KEY_F10").unwrap();
pub static ref KEY_F11: Key = Key::from_str("KEY_F11").unwrap();
pub static ref KEY_F12: Key = Key::from_str("KEY_F12").unwrap();
pub static ref KEY_F13: Key = Key::from_str("KEY_F13").unwrap();
pub static ref KEY_F14: Key = Key::from_str("KEY_F14").unwrap();
pub static ref KEY_F15: Key = Key::from_str("KEY_F15").unwrap();
pub static ref KEY_F16: Key = Key::from_str("KEY_F16").unwrap();
pub static ref KEY_F17: Key = Key::from_str("KEY_F17").unwrap();
pub static ref KEY_F18: Key = Key::from_str("KEY_F18").unwrap();
pub static ref KEY_F19: Key = Key::from_str("KEY_F19").unwrap();
pub static ref KEY_F20: Key = Key::from_str("KEY_F20").unwrap();
pub static ref KEY_F21: Key = Key::from_str("KEY_F21").unwrap();
pub static ref KEY_F22: Key = Key::from_str("KEY_F22").unwrap();
pub static ref KEY_F23: Key = Key::from_str("KEY_F23").unwrap();
pub static ref KEY_F24: Key = Key::from_str("KEY_F24").unwrap();
pub static ref KEY_L: Key = Key::from_str("KEY_L").unwrap();
pub static ref KEY_LEFT: Key = Key::from_str("KEY_LEFT").unwrap();
pub static ref KEY_LEFTBRACE: Key = Key::from_str("KEY_LEFTBRACE").unwrap();
pub static ref KEY_LEFTSHIFT: Key = Key::from_str("KEY_LEFTSHIFT").unwrap();
pub static ref KEY_LEFT_ALT: Key = Key::from_str("KEY_LEFTALT").unwrap();
pub static ref KEY_LEFT_CTRL: Key = Key::from_str("KEY_LEFTCTRL").unwrap();
pub static ref KEY_LEFT_META: Key = Key::from_str("KEY_LEFTMETA").unwrap();
pub static ref KEY_LEFT_SHIFT: Key = Key::from_str("KEY_LEFTSHIFT").unwrap();
pub static ref KEY_M: Key = Key::from_str("KEY_M").unwrap();
pub static ref KEY_MINUS: Key = Key::from_str("KEY_MINUS").unwrap();
pub static ref KEY_N: Key = Key::from_str("KEY_N").unwrap();
pub static ref KEY_O: Key = Key::from_str("KEY_O").unwrap();
pub static ref KEY_P: Key = Key::from_str("KEY_P").unwrap();
pub static ref KEY_PAGEDOWN: Key = Key::from_str("KEY_PAGEDOWN").unwrap();
pub static ref KEY_PAGEUP: Key = Key::from_str("KEY_PAGEUP").unwrap();
pub static ref KEY_Q: Key = Key::from_str("KEY_Q").unwrap();
pub static ref KEY_R: Key = Key::from_str("KEY_R").unwrap();
pub static ref KEY_RIGHT: Key = Key::from_str("KEY_RIGHT").unwrap();
pub static ref KEY_RIGHTBRACE: Key = Key::from_str("KEY_RIGHTBRACE").unwrap();
pub static ref KEY_RIGHTSHIFT: Key = Key::from_str("KEY_RIGHTSHIFT").unwrap();
pub static ref KEY_RIGHT_ALT: Key = Key::from_str("KEY_RIGHTALT").unwrap();
pub static ref KEY_RIGHT_CTRL: Key = Key::from_str("KEY_RIGHTCTRL").unwrap();
pub static ref KEY_RIGHT_META: Key = Key::from_str("KEY_RIGHTMETA").unwrap();
pub static ref KEY_RIGHT_SHIFT: Key = Key::from_str("KEY_RIGHTSHIFT").unwrap();
pub static ref KEY_S: Key = Key::from_str("KEY_S").unwrap();
pub static ref KEY_SEMICOLON: Key = Key::from_str("KEY_SEMICOLON").unwrap();
pub static ref KEY_SLASH: Key = Key::from_str("KEY_SLASH").unwrap();
pub static ref KEY_SPACE: Key = Key::from_str("KEY_SPACE").unwrap();
pub static ref KEY_T: Key = Key::from_str("KEY_T").unwrap();
pub static ref KEY_TAB: Key = Key::from_str("KEY_TAB").unwrap();
pub static ref KEY_U: Key = Key::from_str("KEY_U").unwrap();
pub static ref KEY_UP: Key = Key::from_str("KEY_UP").unwrap();
pub static ref KEY_V: Key = Key::from_str("KEY_V").unwrap();
pub static ref KEY_W: Key = Key::from_str("KEY_W").unwrap();
pub static ref KEY_X: Key = Key::from_str("KEY_X").unwrap();
pub static ref KEY_Y: Key = Key::from_str("KEY_Y").unwrap();
pub static ref KEY_Z: Key = Key::from_str("KEY_Z").unwrap();
}


lazy_static! {
    pub(crate) static ref KEY_ALIAS_TABLE: HashMap<&'static str, (Key, KeyModifierFlags)> = {
        let mut m = HashMap::new();
        m.insert("ALT", (*KEY_LEFT_ALT, KeyModifierFlags::new()));
        m.insert("BACKSPACE", (*KEY_BACKSPACE, KeyModifierFlags::new()));
        m.insert("BTN_LEFT", (*BTN_LEFT, KeyModifierFlags::new()));
        m.insert("BTN_MIDDLE", (*BTN_MIDDLE, KeyModifierFlags::new()));
        m.insert("BTN_RIGHT", (*BTN_RIGHT, KeyModifierFlags::new()));
        m.insert("CAPSLOCK", (*KEY_CAPSLOCK, KeyModifierFlags::new()));
        m.insert("CTRL", (*KEY_LEFT_CTRL, KeyModifierFlags::new()));
        m.insert("DOWN", (*KEY_DOWN, KeyModifierFlags::new()));
        m.insert("ESC", (*KEY_ESC, KeyModifierFlags::new()));
        m.insert("F1", (*KEY_F1, KeyModifierFlags::new()));
        m.insert("F10", (*KEY_F10, KeyModifierFlags::new()));
        m.insert("F11", (*KEY_F11, KeyModifierFlags::new()));
        m.insert("F12", (*KEY_F12, KeyModifierFlags::new()));
        m.insert("F13", (*KEY_F13, KeyModifierFlags::new()));
        m.insert("F14", (*KEY_F14, KeyModifierFlags::new()));
        m.insert("F15", (*KEY_F15, KeyModifierFlags::new()));
        m.insert("F16", (*KEY_F16, KeyModifierFlags::new()));
        m.insert("F17", (*KEY_F17, KeyModifierFlags::new()));
        m.insert("F18", (*KEY_F18, KeyModifierFlags::new()));
        m.insert("F19", (*KEY_F19, KeyModifierFlags::new()));
        m.insert("F2", (*KEY_F2, KeyModifierFlags::new()));
        m.insert("F20", (*KEY_F20, KeyModifierFlags::new()));
        m.insert("F21", (*KEY_F21, KeyModifierFlags::new()));
        m.insert("F22", (*KEY_F22, KeyModifierFlags::new()));
        m.insert("F23", (*KEY_F23, KeyModifierFlags::new()));
        m.insert("F24", (*KEY_F24, KeyModifierFlags::new()));
        m.insert("F3", (*KEY_F3, KeyModifierFlags::new()));
        m.insert("F4", (*KEY_F4, KeyModifierFlags::new()));
        m.insert("F5", (*KEY_F5, KeyModifierFlags::new()));
        m.insert("F6", (*KEY_F6, KeyModifierFlags::new()));
        m.insert("F7", (*KEY_F7, KeyModifierFlags::new()));
        m.insert("F8", (*KEY_F8, KeyModifierFlags::new()));
        m.insert("F9", (*KEY_F9, KeyModifierFlags::new()));
        m.insert("KPD0", (*KEY_KPD0, KeyModifierFlags::new()));
        m.insert("KPD1", (*KEY_KPD1, KeyModifierFlags::new()));
        m.insert("KPD2", (*KEY_KPD2, KeyModifierFlags::new()));
        m.insert("KPD3", (*KEY_KPD3, KeyModifierFlags::new()));
        m.insert("KPD4", (*KEY_KPD4, KeyModifierFlags::new()));
        m.insert("KPD5", (*KEY_KPD5, KeyModifierFlags::new()));
        m.insert("KPD6", (*KEY_KPD6, KeyModifierFlags::new()));
        m.insert("KPD7", (*KEY_KPD7, KeyModifierFlags::new()));
        m.insert("KPD8", (*KEY_KPD8, KeyModifierFlags::new()));
        m.insert("KPD9", (*KEY_KPD9, KeyModifierFlags::new()));
        m.insert("LEFT", (*KEY_LEFT, KeyModifierFlags::new()));
        m.insert("LEFT_ALT", (*KEY_LEFT_ALT, KeyModifierFlags::new()));
        m.insert("LEFT_CTRL", (*KEY_RIGHT_CTRL, KeyModifierFlags::new()));
        m.insert("LEFT_META", (*KEY_LEFT_META, KeyModifierFlags::new()));
        m.insert("LEFT_SHIFT", (*KEY_LEFTSHIFT, KeyModifierFlags::new()));
        m.insert("META", (*KEY_LEFT_META, KeyModifierFlags::new()));
        m.insert("PAGE_DOWN", (*KEY_PAGEDOWN, KeyModifierFlags::new()));
        m.insert("PAGE_UP", (*KEY_PAGEUP, KeyModifierFlags::new()));
        m.insert("RIGHT", (*KEY_RIGHT, KeyModifierFlags::new()));
        m.insert("RIGHT_ALT", (*KEY_RIGHT_ALT, KeyModifierFlags::new()));
        m.insert("RIGHT_CTRL", (*KEY_RIGHT_CTRL, KeyModifierFlags::new()));
        m.insert("RIGHT_META", (*KEY_RIGHT_META, KeyModifierFlags::new()));
        m.insert("RIGHT_SHIFT", (*KEY_RIGHTSHIFT, KeyModifierFlags::new()));
        m.insert("SHIFT", (*KEY_LEFTSHIFT, KeyModifierFlags::new()));
        m.insert("SPACE", (*KEY_SPACE, KeyModifierFlags::new()));
        m.insert("TAB", (*KEY_TAB, KeyModifierFlags::new()));
        m.insert("UP", (*KEY_UP, KeyModifierFlags::new()));
        m
    };
}



